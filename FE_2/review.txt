복습 1.
리엑트에서 컴포넌트가 리렌더링 되는 경우 세 가지

1. 상태(state)의 변경될 때, 이 때 state는 useState에서 나오는 state만 의미하는 것은 아니다.
2. 부모가 내려주는 props의 값이 변경되었을 때
3. 부모 컴포넌트가 리렌더링 될 때 (자식 컴포넌트도 리렌더링)

---

복습 2.
Context API를 사용할 때 기억하면 좋은 세 단계

1. 만든다. -> createContext
2. 사용한다. -> useContext
3. 범위를 지정해서 값을 내려준다 -> Provider 컴포넌트를 사용하고, props로 value를 내려준다.

---

복습3.
Redux 시스템에 대해서 얘기해 보기

1. 가장 중요한 개념은? store. store란 전역적으로 사용하고 싶은 값을 저장해 두는 저장소
2. store를 통해서 할 수 있는 두 가지 작업을 크게 나눈다면?
    - 가져오기(읽기) Read
    - 변경하기(생성. 수정, 삭제 등) Create, Update, Delete
    이 둘 중에서 상대적으로 구현하기 쉬운 작업은? 가져오기(읽기)!
    useSelector를 사용하면 저장소에서 값을 바로 꺼낼 수 있기 때문에!
3. 변경하기를 비유를 통해서 이해해 보기
저장소(store)에 저장되어 있는 값들을 변경하는 곳
    -> 공장 : reducer
    -> 대형 어플리케이션을 개발하게 될수록 다양한 상태들과 액션이 만들어 지게 되는데 이것들을 하나의 공장에서 다 처리하는 것은 유지보수성을 크게 저해한다.
    -> 관련 있는 것들끼리 모아주면 되겠죠.
    -> 공장을 여러개 설립한다.
    -> 그리고 그 공장들을 저장소에 등록해 준다.
공장의 특성
    -> 까다롭다
왜 까다롭다고 얘기할 수 있을까?
    -> 아무렇게나 작업을 해주지 않기 때문에
    -> 작업지시서(action)를 제공해 주어야만 작업을 해주기 때문에.
작업지시서는 어떤 내용들로 구성이 되어 있을까요?
    -> (필수) 작업의 이름(type)
    -> (옵션) 작업에 필요한 정보(payload)
그렇다면 작업지시서의 자바스크립트 내에서의 타입은 무엇일까? 객체
작업지시서를 누군가는 써야 뭔가 작업이 시작될텐데, 누가 쓰죠?
    -> 필요한 녀석이 작업지시서 써야 해요.
        ex) const action = { type: "incrementCount", payload: 100 }
    -> 컴포넌트
    -> 작업지시서를 매번 직접 쓴다면?
    -> 예를 들어, 어떤 특정한 작업을 100개의 컴포넌트에서 작성을 해야 하는 상황이 있다고 합시다.
    -> 100개의 컴포넌트에서 직접 { type: "incrementCount", payload: ??? } 쓸까?
    -> 작업지시서를 찍어 내는 판을 하나 만들어 두면 좋겠죠.
    -> 작업지시서 생성기 (Action creator)
작업지시서를 만들기만 하면 작업이 진행되나요?
    -> 만든 작업지시서를 공장에 전달해 주어야 한다.
그럼 그 전달자를 뭐라고 하죠?
    -> 우체부
그럼 그 전달자 또는 전달하는 행위를 영어로는?
    -> 디스패치
        -> 디스패치를 하고 싶다? useDispatch

리덕스를 사용하기 위해서 필요한 다양한 것들을 좀 더 쉽게 만들 수 있도록 나온 것!
-> slice

